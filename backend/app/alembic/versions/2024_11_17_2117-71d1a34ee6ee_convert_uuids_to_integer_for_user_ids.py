"""Convert UUIDs to Integer for user IDs

Revision ID: 71d1a34ee6ee
Revises: 96cebaa1a5b5
Create Date: 2024-11-17 21:17:07.970485

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "71d1a34ee6ee"
down_revision: Union[str, None] = "96cebaa1a5b5"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "tokens",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(length=50), nullable=False),
        sa.Column("ticker", sa.String(length=10), nullable=False),
        sa.Column(
            "total_supply", sa.DECIMAL(precision=32, scale=8), nullable=False
        ),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_tokens")),
        sa.UniqueConstraint("name", name=op.f("uq_tokens_name")),
        sa.UniqueConstraint("ticker", name=op.f("uq_tokens_ticker")),
    )
    op.create_table(
        "exchange_wallets",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("token_id", sa.Integer(), nullable=False),
        sa.Column(
            "balance", sa.DECIMAL(precision=32, scale=8), nullable=False
        ),
        sa.Column(
            "locked_balance", sa.DECIMAL(precision=32, scale=8), nullable=False
        ),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["token_id"],
            ["tokens.id"],
            name=op.f("fk_exchange_wallets_token_id_tokens"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_exchange_wallets")),
    )
    op.create_table(
        "faucet_logs",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("token_id", sa.Integer(), nullable=False),
        sa.Column("amount", sa.DECIMAL(precision=32, scale=8), nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["token_id"],
            ["tokens.id"],
            name=op.f("fk_faucet_logs_token_id_tokens"),
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk_faucet_logs_user_id_users"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_faucet_logs")),
    )
    op.create_table(
        "trades",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("token_id", sa.Integer(), nullable=False),
        sa.Column("trade_type", sa.String(length=10), nullable=False),
        sa.Column("amount", sa.DECIMAL(precision=32, scale=8), nullable=False),
        sa.Column("price", sa.DECIMAL(precision=32, scale=8), nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["token_id"], ["tokens.id"], name=op.f("fk_trades_token_id_tokens")
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("fk_trades_user_id_users")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_trades")),
    )
    op.create_table(
        "transfers",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("sender_id", sa.Integer(), nullable=False),
        sa.Column("receiver_id", sa.Integer(), nullable=False),
        sa.Column("token_id", sa.Integer(), nullable=False),
        sa.Column("amount", sa.DECIMAL(precision=32, scale=8), nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["receiver_id"],
            ["users.id"],
            name=op.f("fk_transfers_receiver_id_users"),
        ),
        sa.ForeignKeyConstraint(
            ["sender_id"],
            ["users.id"],
            name=op.f("fk_transfers_sender_id_users"),
        ),
        sa.ForeignKeyConstraint(
            ["token_id"],
            ["tokens.id"],
            name=op.f("fk_transfers_token_id_tokens"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_transfers")),
    )
    op.create_table(
        "user_wallets",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("token_id", sa.Integer(), nullable=False),
        sa.Column(
            "balance", sa.DECIMAL(precision=32, scale=8), nullable=False
        ),
        sa.Column(
            "locked_balance", sa.DECIMAL(precision=32, scale=8), nullable=False
        ),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["token_id"],
            ["tokens.id"],
            name=op.f("fk_user_wallets_token_id_tokens"),
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk_user_wallets_user_id_users"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_user_wallets")),
    )
    op.drop_table("orders")
    op.drop_table("wallets")
    op.add_column(
        "users", sa.Column("password_hash", sa.String(), nullable=False)
    )
    op.add_column(
        "users", sa.Column("uid", sa.String(length=16), nullable=False)
    )
    op.alter_column(
        "users",
        "email",
        existing_type=sa.VARCHAR(length=100),
        type_=sa.String(length=255),
        existing_nullable=False,
    )
    op.alter_column(
        "users",
        "username",
        existing_type=sa.VARCHAR(length=100),
        type_=sa.String(length=50),
        existing_nullable=False,
    )
    op.alter_column(
        "users",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.drop_constraint("users_email_key", "users", type_="unique")
    op.drop_constraint("users_username_key", "users", type_="unique")
    op.create_index(op.f("ix_users_id"), "users", ["id"], unique=False)
    op.create_unique_constraint(op.f("uq_users_email"), "users", ["email"])
    op.create_unique_constraint(op.f("uq_users_uid"), "users", ["uid"])
    op.create_unique_constraint(
        op.f("uq_users_username"), "users", ["username"]
    )
    op.drop_column("users", "password")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "users",
        sa.Column(
            "password",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.drop_constraint(op.f("uq_users_username"), "users", type_="unique")
    op.drop_constraint(op.f("uq_users_uid"), "users", type_="unique")
    op.drop_constraint(op.f("uq_users_email"), "users", type_="unique")
    op.drop_index(op.f("ix_users_id"), table_name="users")
    op.create_unique_constraint("users_username_key", "users", ["username"])
    op.create_unique_constraint("users_email_key", "users", ["email"])
    op.alter_column(
        "users",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.alter_column(
        "users",
        "username",
        existing_type=sa.String(length=50),
        type_=sa.VARCHAR(length=100),
        existing_nullable=False,
    )
    op.alter_column(
        "users",
        "email",
        existing_type=sa.String(length=255),
        type_=sa.VARCHAR(length=100),
        existing_nullable=False,
    )
    op.drop_column("users", "uid")
    op.drop_column("users", "password_hash")
    op.create_table(
        "wallets",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "balance",
            sa.NUMERIC(precision=18, scale=8),
            server_default=sa.text("0.0"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "currency",
            sa.VARCHAR(length=10),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name="wallets_user_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="wallets_pkey"),
    )
    op.create_table(
        "orders",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "type", sa.VARCHAR(length=10), autoincrement=False, nullable=False
        ),
        sa.Column(
            "amount",
            sa.NUMERIC(precision=18, scale=8),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "price",
            sa.NUMERIC(precision=18, scale=8),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "status",
            sa.VARCHAR(length=20),
            server_default=sa.text("'open'::character varying"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name="orders_user_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="orders_pkey"),
    )
    op.drop_table("user_wallets")
    op.drop_table("transfers")
    op.drop_table("trades")
    op.drop_table("faucet_logs")
    op.drop_table("exchange_wallets")
    op.drop_table("tokens")
    # ### end Alembic commands ###
